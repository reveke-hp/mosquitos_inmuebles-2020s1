 ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Respuestas Mosquitos:
 
 2)
 
 var mosquito1 = new MosquitoPesado() :
 Tiene como atributos, aguante,cantidadDePicados y peso.(es herencia de Mosquito)
 
 var mosquito2 = new MosquitoGloton() :
 Tiene como atributos, aguante, cantidadDePicados y peso.(es herencia de MosquitoPesado)
 
 var mosquito3 = new MosquitoConVeneno() :
 Tiene como atributos, aguante, cantidadDePicados y veneno.(es herencia de Mosquito)
 
 var mosquito4 = new MosquitoConVenenoMortal() :
 Tiene como atributos, aguante, cantidadDePicados, veneno y mortalidad.(es herencia de MosquitoConVeneno)
 
 var malena = new Estudiante()
 
 3) Todos cambian su valor de aguante al picar: 
 _al MosquitoPesado() se le reduce el aguante muy levemente (es proporcional al peso de malena dividido por 100).
 _MosquitoGloton() sufre el mismo cambio que el MosquitoPesado().
 _MosquitoConVeneno() pierde aguante al igual que la clase Mosquito y pierde veneno.
 _MosquitoConVenenoMortal() pierde aguante al igual que la clase Mosquito y pierde mortalidad.
 
 4) mosquito4 no quiere picar, para quierePicar() sea True, osea que quiera, tiene que cumplir con dos condiciones, que su aguante sea mayor a 500 y que su mortalidad sea mayor a 4, la cual solo cumple mortalidad por tener 8.
 
 5) Siendo el metodo solo compuesto por method quierePicar() = veneno > 5 sin super ni otra condicion, mosquito4 si quiere picar, daria True porque tiene 10 de veneno sobre 5.
 
 6)
 descansar = mosquito3 y mosquito4 lo entienden.
quierePicar = los 4 mosquitos lo entienden.
Peso = mosquito1 y mosquito 2 lo entienden.
PicadorFrecuente = los 4 mosquitos.
EsMortal = solo mosquito4 lo entiende.

7)
mosquito1, mosquito2 y mosquito 4 darian como resultado True ya que los 3 cumplen las condiciones.
mosquito3 daria false ya que el aguante es inferior a la condicion.

8) Si le pregunto a mosquito4 me daria un true porque tiene aguante(1800) mayor 500 y mortalidad(50) mayor a 4.
Pero mosquito5 daria error ya que en el super() devuelve un booleano que con los parametros daria True, pero no podes sumarle numeros(valor) a un bool.

9)
class MosquitoConVenenoSabio inherits MosquitoConVeneno{
	override method picadorFrecuente() { return veneno > 50 or super() }
}

class MosquitoFiaca inherits Mosquito{
	override method quierePicar() { return false }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Respuestas Inmuebles :

1)
Primero a la clase armado se le agregaria en el method armar:
		else if(unInmueble.tipo() == "departamento"){
        	unInmueble.ponerAmbientes(3)
        	unInmueble.ponerBalcon()
        	unInmueble.ponerBaulera()
        	unInmueble.ponerLavadero()
        	unInmueble.ponerTechoLoza()
        }
y en la clase Inmueble, method cuantaGentePuedeVivir() hay que agregarle un 
		else if (unInmueble.tipo() == "departamento"){
        	return 4
        }
Para que me responda al crear departamento1 sino tira error
Luego :  const departamento1 = new Inmueble() para crear el departamento1 
Seguido poner departamento1.tipo("departamento") para darle un tipo
armado.armar(departamento1,"colorAEleccion") para armar el departamento y darle un color

2) La clase armado en el method armar no tiene mucho polimorfismo, si bien no esta la clase que necesitas no te sirve para agregar nuevas.
El method cuantaGentePuedeVivir() de la clase Inmueble tambien es muy exclusiva, mas que los determinados no podes agregarle nuevas opciones.


3) En la clase Inmueble yo crearia objetos donde definis el estilo del inmueble. Ej=
object departamento {
	var property cuantaGentePuedeVivir = 4
}
Para que al modificar dentro de la clase inmueble para que asi pueda ser mas generico y no tener que poner un numero limitado de opciones
cuantaGentePuedeVivir(objeto){ return objeto.cuantaGentePuedeVivir() }







